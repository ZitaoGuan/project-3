import unittest

import solver_funcs

puzzle = [[4, 1, 2, 5, 3],
          [1, 5, 4, 3, 2],
          [2, 3, 5, 4, 1],
          [3, 4, 1, 2, 5],
          [5, 2, 3, 1, 4]]

cages = [[5, 2, 0, 5],
         [8, 3, 1, 2, 6],
         [8, 2, 3, 8],
         [6, 3, 4, 9, 14],
         [13, 3, 7, 12, 13],
         [5, 2, 10, 15],
         [14, 4, 11, 16, 20, 21],
         [6, 3, 17, 18, 22],
         [10, 3, 19, 23, 24]]


class TestCases(unittest.TestCase):
    def test_check_valid_with_finished_puzzle(self):
        self.assertTrue(solver_funcs.check_valid(puzzle, cages))

    def test_columns0(self):
        self.assertTrue(solver_funcs.check_columns_valid2(puzzle, 1), True)

    def test_columns1(self):
        self.assertTrue(solver_funcs.check_columns_valid2(puzzle, 3), True)

    def test_columns3(self):
        puzzle = [[4, 1, 2, 0, 3],
                  [1, 5, 2, 0, 3],
                  [2, 2, 5, 0, 1],
                  [3, 4, 1, 0, 5],
                  [5, 2, 3, 0, 4]]
        self.assertTrue(solver_funcs.check_columns_valid2(puzzle, 3), True)

    def test_columns2(self):
        puzzle = [[4, 1, 2, 5, 3],
                  [1, 5, 2, 3, 3],
                  [2, 2, 5, 5, 1],
                  [3, 4, 1, 2, 5],
                  [5, 2, 3, 1, 4]]
        self.assertFalse(solver_funcs.check_columns_valid2(puzzle, 3), False)

    def test_check_cage_vaild(self):
        self.assertTrue(solver_funcs.check_cages_valid(puzzle, cages), True)

    def test_check_cage_vaild1(self):
        puzzle = [[0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 1]]
        cages = [[5, 2, 0, 5],
                 [8, 3, 1, 2, 6],
                 [8, 2, 3, 8],
                 [6, 3, 4, 9, 14],
                 [13, 3, 7, 12, 13],
                 [5, 2, 10, 15],
                 [14, 4, 11, 16, 20, 21],
                 [6, 3, 17, 18, 22],
                 [10, 3, 19, 23, 24]]
        self.assertTrue(solver_funcs.check_cages_valid(puzzle, cages), True)

    def test_check_cage_vaild2(self):
        puzzle = [[0, 5, 1, 0, 0],
                  [0, 4, 3, 0, 0],
                  [0, 2, 5, 0, 0],
                  [0, 1, 4, 0, 0],
                  [0, 3, 2, 0, 1]]
        cages = [[9, 2, 0, 5],
                 [10, 3, 1, 2, 6],
                 [8, 2, 3, 8],
                 [6, 3, 4, 9, 14],
                 [13, 3, 7, 12, 13],
                 [5, 2, 10, 15],
                 [14, 4, 11, 16, 20, 21],
                 [6, 3, 17, 18, 22],
                 [10, 3, 19, 23, 24]]
        self.assertFalse(solver_funcs.check_cages_valid(puzzle, cages), False)

    def test_column(self):
        self.assertTrue(solver_funcs.check_columns_valid(puzzle), True)

    def test_column3(self):
        puzzle = [[0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 1]]
        self.assertTrue(solver_funcs.check_columns_valid(puzzle), True)

    def test_column1(self):
        puzzle = [[4, 1, 2, 5, 3],
                  [1, 5, 4, 5, 2],
                  [2, 3, 5, 1, 1],
                  [3, 4, 1, 2, 5],
                  [5, 2, 3, 1, 4]]
        self.assertFalse(solver_funcs.check_columns_valid(puzzle), False)

    def test_column2(self):
        puzzle = [[1, 1, 1, 1, 1],
                  [1, 1, 1, 1, 1],
                  [1, 1, 1, 1, 1],
                  [1, 1, 1, 1, 1],
                  [1, 1, 1, 1, 1]]
        self.assertFalse(solver_funcs.check_columns_valid(puzzle), False)

    def test_rows(self):
        self.assertTrue(solver_funcs.check_rows_valid(puzzle), True)

    def test_rows3(self):
        puzzle = [[0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0],
                  [0, 0, 0, 0, 0],
                  [0, 0, 0, 2, 0],
                  [0, 0, 0, 0, 0]]
        self.assertTrue(solver_funcs.check_rows_valid(puzzle), True)

    def test_rows1(self):
        puzzle = [[4, 1, 2, 5, 3],
                  [1, 5, 1, 3, 2],
                  [2, 3, 5, 4, 1],
                  [3, 4, 0, 2, 5],
                  [5, 2, 2, 1, 4]]
        self.assertFalse(solver_funcs.check_rows_valid(puzzle), False)

    def test_rows2(self):
        puzzle = [[4, 1, 5, 5, 3],
                  [1, 1, 1, 1, 1],
                  [2, 0, 0, 0, 1],
                  [3, 4, 0, 2, 5],
                  [5, 2, 2, 1, 4]]
        self.assertFalse(solver_funcs.check_rows_valid(puzzle), False)

    def test_row1(self):
        self.assertTrue(solver_funcs.check_rows_valid2(puzzle, 2), True)

    def test_row2(self):
        self.assertTrue(solver_funcs.check_rows_valid2(puzzle, 3), True)

    def test_row3(self):
        puzzle = [[5, 1, 1, 5, 3],
                  [1, 5, 4, 3, 2],
                  [2, 3, 5, 4, 1],
                  [3, 4, 1, 2, 5],
                  [5, 2, 3, 1, 4]]
        self.assertFalse(solver_funcs.check_rows_valid2(puzzle, 0), False)

    def test_row4(self):
        puzzle = [[5, 1, 1, 5, 3],
                  [1, 5, 4, 3, 2],
                  [2, 3, 5, 4, 1],
                  [3, 5, 1, 3, 5],
                  [5, 2, 3, 1, 4]]
        self.assertFalse(solver_funcs.check_rows_valid2(puzzle, 3), False)

    def test_cage_valid1(self):
        self.assertTrue(solver_funcs.check_cage_valid(puzzle,
                                                      [8, 3, 1, 2, 6]),
                        True)

    def test_cage_valid5(self):
        self.assertTrue(solver_funcs.check_cage_valid(puzzle,
                                                      [8, 3, 1, 2, 6]),
                        True)

    def test_cage_valid2(self):
        self.assertTrue(solver_funcs.check_cage_valid(puzzle,
                                                      [13, 3, 7, 12, 13]),
                        True)

    def test_cage_valid3(self):
        self.assertFalse(solver_funcs.check_cage_valid(puzzle,
                                                       [8, 3, 8, 1, 4]),
                         False)

    def test_cage_valid4(self):
        self.assertFalse(solver_funcs.check_cage_valid(puzzle,
                                                       [2, 3, 9, 20, 24]),
                         False)


if __name__ == '__main__':
    unittest.main()
